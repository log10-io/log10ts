/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import {
    ChatCompletionMessageToolCall,
    ChatCompletionMessageToolCall$,
} from "./chatcompletionmessagetoolcall.js";
import { ChatCompletionRole, ChatCompletionRole$ } from "./chatcompletionrole.js";
import * as z from "zod";

/**
 * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type ChatCompletionResponseMessageFunctionCall = {
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string;
    /**
     * The name of the function to call.
     */
    name: string;
};

/**
 * A chat completion message generated by the model.
 */
export type ChatCompletionResponseMessage = {
    /**
     * The contents of the message.
     */
    content: string | null;
    /**
     * The tool calls generated by the model, such as function calls.
     */
    toolCalls?: Array<ChatCompletionMessageToolCall> | undefined;
    /**
     * The role of the author of a message
     */
    role: ChatCompletionRole;
    /**
     * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    functionCall?: ChatCompletionResponseMessageFunctionCall | undefined;
};

/** @internal */
export namespace ChatCompletionResponseMessageFunctionCall$ {
    export const inboundSchema: z.ZodType<
        ChatCompletionResponseMessageFunctionCall,
        z.ZodTypeDef,
        unknown
    > = z.object({
        arguments: z.string(),
        name: z.string(),
    });

    export type Outbound = {
        arguments: string;
        name: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ChatCompletionResponseMessageFunctionCall
    > = z.object({
        arguments: z.string(),
        name: z.string(),
    });
}

/** @internal */
export namespace ChatCompletionResponseMessage$ {
    export const inboundSchema: z.ZodType<ChatCompletionResponseMessage, z.ZodTypeDef, unknown> = z
        .object({
            content: z.nullable(z.string()),
            tool_calls: z.array(ChatCompletionMessageToolCall$.inboundSchema).optional(),
            role: ChatCompletionRole$.inboundSchema,
            function_call: z
                .lazy(() => ChatCompletionResponseMessageFunctionCall$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                tool_calls: "toolCalls",
                function_call: "functionCall",
            });
        });

    export type Outbound = {
        content: string | null;
        tool_calls?: Array<ChatCompletionMessageToolCall$.Outbound> | undefined;
        role: string;
        function_call?: ChatCompletionResponseMessageFunctionCall$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatCompletionResponseMessage> =
        z
            .object({
                content: z.nullable(z.string()),
                toolCalls: z.array(ChatCompletionMessageToolCall$.outboundSchema).optional(),
                role: ChatCompletionRole$.outboundSchema,
                functionCall: z
                    .lazy(() => ChatCompletionResponseMessageFunctionCall$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    toolCalls: "tool_calls",
                    functionCall: "function_call",
                });
            });
}
