/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Completion,
  Completion$inboundSchema,
  Completion$Outbound,
  Completion$outboundSchema,
} from "./completion.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "./httpmetadata.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CreateGlobals = {
  xLog10Organization?: string | undefined;
};

export type CreateRequest = {
  xLog10Organization?: string | undefined;
  completion: Completion;
};

export type CreateResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Created
   */
  any?: any | undefined;
  /**
   * Created
   */
  completion?: Completion | undefined;
};

/** @internal */
export const CreateGlobals$inboundSchema: z.ZodType<
  CreateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Log10-Organization": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Log10-Organization": "xLog10Organization",
  });
});

/** @internal */
export type CreateGlobals$Outbound = {
  "X-Log10-Organization"?: string | undefined;
};

/** @internal */
export const CreateGlobals$outboundSchema: z.ZodType<
  CreateGlobals$Outbound,
  z.ZodTypeDef,
  CreateGlobals
> = z.object({
  xLog10Organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xLog10Organization: "X-Log10-Organization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGlobals$ {
  /** @deprecated use `CreateGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateGlobals$inboundSchema;
  /** @deprecated use `CreateGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateGlobals$outboundSchema;
  /** @deprecated use `CreateGlobals$Outbound` instead. */
  export type Outbound = CreateGlobals$Outbound;
}

export function createGlobalsToJSON(createGlobals: CreateGlobals): string {
  return JSON.stringify(CreateGlobals$outboundSchema.parse(createGlobals));
}

export function createGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGlobals' from JSON`,
  );
}

/** @internal */
export const CreateRequest$inboundSchema: z.ZodType<
  CreateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Log10-Organization": z.string().optional(),
  Completion: Completion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Log10-Organization": "xLog10Organization",
    "Completion": "completion",
  });
});

/** @internal */
export type CreateRequest$Outbound = {
  "X-Log10-Organization"?: string | undefined;
  Completion: Completion$Outbound;
};

/** @internal */
export const CreateRequest$outboundSchema: z.ZodType<
  CreateRequest$Outbound,
  z.ZodTypeDef,
  CreateRequest
> = z.object({
  xLog10Organization: z.string().optional(),
  completion: Completion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xLog10Organization: "X-Log10-Organization",
    completion: "Completion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRequest$ {
  /** @deprecated use `CreateRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRequest$inboundSchema;
  /** @deprecated use `CreateRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRequest$outboundSchema;
  /** @deprecated use `CreateRequest$Outbound` instead. */
  export type Outbound = CreateRequest$Outbound;
}

export function createRequestToJSON(createRequest: CreateRequest): string {
  return JSON.stringify(CreateRequest$outboundSchema.parse(createRequest));
}

export function createRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRequest' from JSON`,
  );
}

/** @internal */
export const CreateResponse$inboundSchema: z.ZodType<
  CreateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  any: z.any().optional(),
  Completion: Completion$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Completion": "completion",
  });
});

/** @internal */
export type CreateResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  any?: any | undefined;
  Completion?: Completion$Outbound | undefined;
};

/** @internal */
export const CreateResponse$outboundSchema: z.ZodType<
  CreateResponse$Outbound,
  z.ZodTypeDef,
  CreateResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  any: z.any().optional(),
  completion: Completion$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    completion: "Completion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResponse$ {
  /** @deprecated use `CreateResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResponse$inboundSchema;
  /** @deprecated use `CreateResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResponse$outboundSchema;
  /** @deprecated use `CreateResponse$Outbound` instead. */
  export type Outbound = CreateResponse$Outbound;
}

export function createResponseToJSON(createResponse: CreateResponse): string {
  return JSON.stringify(CreateResponse$outboundSchema.parse(createResponse));
}

export function createResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResponse' from JSON`,
  );
}
