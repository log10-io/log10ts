/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";

export type Feedback = {
  /**
   * The unique identifier for this feedback.
   */
  id?: string | undefined;
  /**
   * The epoch this schema was created.
   */
  createdAtMs?: number | undefined;
  /**
   * The unique identifier for the task associated with this feedback.
   */
  taskId: string;
  /**
   * The values of the feedback. Must be valid JSON according to the task schema.
   */
  jsonValues: { [k: string]: any };
  /**
   * The matched completion ids associated with this feedback.
   */
  matchedCompletionIds?: Array<string> | undefined;
  /**
   * The comment associated with this feedback.
   */
  comment: string;
  completionsSummary?: string | undefined;
  /**
   * The unique identifier for the organization.
   */
  organizationId: string;
};

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  created_at_ms: z.number().optional(),
  task_id: z.string(),
  json_values: z.record(z.any()),
  matched_completion_ids: z.array(z.string()).optional(),
  comment: z.string(),
  completions_summary: z.string().optional(),
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at_ms": "createdAtMs",
    "task_id": "taskId",
    "json_values": "jsonValues",
    "matched_completion_ids": "matchedCompletionIds",
    "completions_summary": "completionsSummary",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type Feedback$Outbound = {
  id?: string | undefined;
  created_at_ms?: number | undefined;
  task_id: string;
  json_values: { [k: string]: any };
  matched_completion_ids?: Array<string> | undefined;
  comment: string;
  completions_summary?: string | undefined;
  organization_id: string;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  id: z.string().optional(),
  createdAtMs: z.number().optional(),
  taskId: z.string(),
  jsonValues: z.record(z.any()),
  matchedCompletionIds: z.array(z.string()).optional(),
  comment: z.string(),
  completionsSummary: z.string().optional(),
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAtMs: "created_at_ms",
    taskId: "task_id",
    jsonValues: "json_values",
    matchedCompletionIds: "matched_completion_ids",
    completionsSummary: "completions_summary",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}
