/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata.js";
import { Task, Task$ } from "./task.js";
import * as z from "zod";

export type GetFeedbackTaskRequest = {
    /**
     * The task id to fetch.
     */
    taskId: string;
};

export type GetFeedbackTaskResponse = {
    httpMeta: HTTPMetadata;
    /**
     * OK
     */
    task?: Task | undefined;
};

/** @internal */
export namespace GetFeedbackTaskRequest$ {
    export const inboundSchema: z.ZodType<GetFeedbackTaskRequest, z.ZodTypeDef, unknown> = z.object(
        {
            taskId: z.string(),
        }
    );

    export type Outbound = {
        taskId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetFeedbackTaskRequest> =
        z.object({
            taskId: z.string(),
        });
}

/** @internal */
export namespace GetFeedbackTaskResponse$ {
    export const inboundSchema: z.ZodType<GetFeedbackTaskResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            Task: Task$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Task: "task",
            });
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        Task?: Task$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetFeedbackTaskResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            task: Task$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                task: "Task",
            });
        });
}
