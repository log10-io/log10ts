/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

/**
 * The schema of the task. Must be valid JSON Schema.
 */
export type JsonSchema = {};

/**
 * The completion tag matching with this task i.e. surfaced as needing feedback.
 */
export type CompletionTagsSelector = {};

export type Task = {
    /**
     * The unique identifier for this task.
     */
    id?: string | undefined;
    /**
     * The epoch this schema was created.
     */
    createdAtMs?: number | undefined;
    /**
     * The schema of the task. Must be valid JSON Schema.
     */
    jsonSchema: JsonSchema;
    /**
     * The name of the task.
     */
    name: string;
    /**
     * The instructions for this task.
     */
    instruction: string;
    /**
     * The completion tag matching with this task i.e. surfaced as needing feedback.
     */
    completionTagsSelector: CompletionTagsSelector;
};

/** @internal */
export const JsonSchema$inboundSchema: z.ZodType<JsonSchema, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type JsonSchema$Outbound = {};

/** @internal */
export const JsonSchema$outboundSchema: z.ZodType<JsonSchema$Outbound, z.ZodTypeDef, JsonSchema> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchema$ {
    /** @deprecated use `JsonSchema$inboundSchema` instead. */
    export const inboundSchema = JsonSchema$inboundSchema;
    /** @deprecated use `JsonSchema$outboundSchema` instead. */
    export const outboundSchema = JsonSchema$outboundSchema;
    /** @deprecated use `JsonSchema$Outbound` instead. */
    export type Outbound = JsonSchema$Outbound;
}

/** @internal */
export const CompletionTagsSelector$inboundSchema: z.ZodType<
    CompletionTagsSelector,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type CompletionTagsSelector$Outbound = {};

/** @internal */
export const CompletionTagsSelector$outboundSchema: z.ZodType<
    CompletionTagsSelector$Outbound,
    z.ZodTypeDef,
    CompletionTagsSelector
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionTagsSelector$ {
    /** @deprecated use `CompletionTagsSelector$inboundSchema` instead. */
    export const inboundSchema = CompletionTagsSelector$inboundSchema;
    /** @deprecated use `CompletionTagsSelector$outboundSchema` instead. */
    export const outboundSchema = CompletionTagsSelector$outboundSchema;
    /** @deprecated use `CompletionTagsSelector$Outbound` instead. */
    export type Outbound = CompletionTagsSelector$Outbound;
}

/** @internal */
export const Task$inboundSchema: z.ZodType<Task, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string().optional(),
        created_at_ms: z.number().optional(),
        json_schema: z.lazy(() => JsonSchema$inboundSchema),
        name: z.string(),
        instruction: z.string(),
        completion_tags_selector: z.lazy(() => CompletionTagsSelector$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            created_at_ms: "createdAtMs",
            json_schema: "jsonSchema",
            completion_tags_selector: "completionTagsSelector",
        });
    });

/** @internal */
export type Task$Outbound = {
    id?: string | undefined;
    created_at_ms?: number | undefined;
    json_schema: JsonSchema$Outbound;
    name: string;
    instruction: string;
    completion_tags_selector: CompletionTagsSelector$Outbound;
};

/** @internal */
export const Task$outboundSchema: z.ZodType<Task$Outbound, z.ZodTypeDef, Task> = z
    .object({
        id: z.string().optional(),
        createdAtMs: z.number().optional(),
        jsonSchema: z.lazy(() => JsonSchema$outboundSchema),
        name: z.string(),
        instruction: z.string(),
        completionTagsSelector: z.lazy(() => CompletionTagsSelector$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            createdAtMs: "created_at_ms",
            jsonSchema: "json_schema",
            completionTagsSelector: "completion_tags_selector",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Task$ {
    /** @deprecated use `Task$inboundSchema` instead. */
    export const inboundSchema = Task$inboundSchema;
    /** @deprecated use `Task$outboundSchema` instead. */
    export const outboundSchema = Task$outboundSchema;
    /** @deprecated use `Task$Outbound` instead. */
    export type Outbound = Task$Outbound;
}
