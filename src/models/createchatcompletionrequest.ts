/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import {
    ChatCompletionFunctionCallOption,
    ChatCompletionFunctionCallOption$inboundSchema,
    ChatCompletionFunctionCallOption$Outbound,
    ChatCompletionFunctionCallOption$outboundSchema,
} from "./chatcompletionfunctioncalloption.js";
import {
    ChatCompletionFunctions,
    ChatCompletionFunctions$inboundSchema,
    ChatCompletionFunctions$Outbound,
    ChatCompletionFunctions$outboundSchema,
} from "./chatcompletionfunctions.js";
import {
    ChatCompletionRequestMessage,
    ChatCompletionRequestMessage$inboundSchema,
    ChatCompletionRequestMessage$Outbound,
    ChatCompletionRequestMessage$outboundSchema,
} from "./chatcompletionrequestmessage.js";
import {
    ChatCompletionStreamOptions,
    ChatCompletionStreamOptions$inboundSchema,
    ChatCompletionStreamOptions$Outbound,
    ChatCompletionStreamOptions$outboundSchema,
} from "./chatcompletionstreamoptions.js";
import {
    ChatCompletionTool,
    ChatCompletionTool$inboundSchema,
    ChatCompletionTool$Outbound,
    ChatCompletionTool$outboundSchema,
} from "./chatcompletiontool.js";
import {
    ChatCompletionToolChoiceOption,
    ChatCompletionToolChoiceOption$inboundSchema,
    ChatCompletionToolChoiceOption$Outbound,
    ChatCompletionToolChoiceOption$outboundSchema,
} from "./chatcompletiontoolchoiceoption.js";
import * as z from "zod";

/**
 * Must be one of `text` or `json_object`.
 */
export enum CreateChatCompletionRequestType {
    Text = "text",
    JsonObject = "json_object",
}

/**
 * An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
 *
 * @remarks
 *
 * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
 *
 * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
 *
 */
export type ResponseFormat = {
    /**
     * Must be one of `text` or `json_object`.
     */
    type?: CreateChatCompletionRequestType | undefined;
};

/**
 * Up to 4 sequences where the API will stop generating further tokens.
 *
 * @remarks
 *
 */
export type Stop = string | Array<string>;

/**
 * `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.
 *
 * @remarks
 *
 */
export enum One {
    None = "none",
    Auto = "auto",
}

/**
 * Deprecated in favor of `tool_choice`.
 *
 * @remarks
 *
 * Controls which (if any) function is called by the model.
 * `none` means the model will not call a function and instead generates a message.
 * `auto` means the model can pick between generating a message or calling a function.
 * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
 *
 * `none` is the default when no functions are present. `auto` is the default if functions are present.
 *
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type CreateChatCompletionRequestFunctionCall = ChatCompletionFunctionCallOption | One;

export type CreateChatCompletionRequest = {
    /**
     * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
     */
    messages: Array<ChatCompletionRequestMessage>;
    /**
     * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
     */
    model?: any | null | undefined;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     *
     * @remarks
     *
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     */
    frequencyPenalty?: number | null | undefined;
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     *
     * @remarks
     *
     * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     *
     */
    logitBias?: { [k: string]: number } | null | undefined;
    /**
     * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
     */
    logprobs?: boolean | null | undefined;
    /**
     * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
     */
    topLogprobs?: number | null | undefined;
    /**
     * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
     *
     * @remarks
     *
     * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
     *
     */
    maxTokens?: number | null | undefined;
    /**
     * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
     */
    n?: number | null | undefined;
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     *
     * @remarks
     *
     * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
     *
     */
    presencePenalty?: number | null | undefined;
    /**
     * An object specifying the format that the model must output. Compatible with [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.
     *
     * @remarks
     *
     * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
     *
     * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
     *
     */
    responseFormat?: ResponseFormat | undefined;
    /**
     * This feature is in Beta.
     *
     * @remarks
     * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
     * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
     *
     */
    seed?: number | null | undefined;
    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     *
     * @remarks
     *
     */
    stop?: string | Array<string> | null | undefined;
    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
     *
     * @remarks
     *
     */
    stream?: boolean | null | undefined;
    /**
     * Options for streaming response. Only set this when you set `stream: true`.
     *
     * @remarks
     *
     */
    streamOptions?: ChatCompletionStreamOptions | null | undefined;
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     *
     * @remarks
     *
     * We generally recommend altering this or `top_p` but not both.
     *
     */
    temperature?: number | null | undefined;
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     *
     * @remarks
     *
     * We generally recommend altering this or `temperature` but not both.
     *
     */
    topP?: number | null | undefined;
    /**
     * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
     *
     * @remarks
     *
     */
    tools?: Array<ChatCompletionTool> | undefined;
    /**
     * Controls which (if any) tool is called by the model.
     *
     * @remarks
     * `none` means the model will not call any tool and instead generates a message.
     * `auto` means the model can pick between generating a message or calling one or more tools.
     * `required` means the model must call one or more tools.
     * Specifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
     *
     * `none` is the default when no tools are present. `auto` is the default if tools are present.
     *
     */
    toolChoice?: ChatCompletionToolChoiceOption | undefined;
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     *
     * @remarks
     *
     */
    user?: string | undefined;
    /**
     * Deprecated in favor of `tool_choice`.
     *
     * @remarks
     *
     * Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
     *
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    functionCall?: ChatCompletionFunctionCallOption | One | undefined;
    /**
     * Deprecated in favor of `tools`.
     *
     * @remarks
     *
     * A list of functions the model may generate JSON inputs for.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    functions?: Array<ChatCompletionFunctions> | undefined;
};

/** @internal */
export const CreateChatCompletionRequestType$inboundSchema: z.ZodNativeEnum<
    typeof CreateChatCompletionRequestType
> = z.nativeEnum(CreateChatCompletionRequestType);

/** @internal */
export const CreateChatCompletionRequestType$outboundSchema: z.ZodNativeEnum<
    typeof CreateChatCompletionRequestType
> = CreateChatCompletionRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionRequestType$ {
    /** @deprecated use `CreateChatCompletionRequestType$inboundSchema` instead. */
    export const inboundSchema = CreateChatCompletionRequestType$inboundSchema;
    /** @deprecated use `CreateChatCompletionRequestType$outboundSchema` instead. */
    export const outboundSchema = CreateChatCompletionRequestType$outboundSchema;
}

/** @internal */
export const ResponseFormat$inboundSchema: z.ZodType<ResponseFormat, z.ZodTypeDef, unknown> =
    z.object({
        type: CreateChatCompletionRequestType$inboundSchema.default(
            CreateChatCompletionRequestType.Text
        ),
    });

/** @internal */
export type ResponseFormat$Outbound = {
    type: string;
};

/** @internal */
export const ResponseFormat$outboundSchema: z.ZodType<
    ResponseFormat$Outbound,
    z.ZodTypeDef,
    ResponseFormat
> = z.object({
    type: CreateChatCompletionRequestType$outboundSchema.default(
        CreateChatCompletionRequestType.Text
    ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormat$ {
    /** @deprecated use `ResponseFormat$inboundSchema` instead. */
    export const inboundSchema = ResponseFormat$inboundSchema;
    /** @deprecated use `ResponseFormat$outboundSchema` instead. */
    export const outboundSchema = ResponseFormat$outboundSchema;
    /** @deprecated use `ResponseFormat$Outbound` instead. */
    export type Outbound = ResponseFormat$Outbound;
}

/** @internal */
export const Stop$inboundSchema: z.ZodType<Stop, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.array(z.string()),
]);

/** @internal */
export type Stop$Outbound = string | Array<string>;

/** @internal */
export const Stop$outboundSchema: z.ZodType<Stop$Outbound, z.ZodTypeDef, Stop> = z.union([
    z.string(),
    z.array(z.string()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Stop$ {
    /** @deprecated use `Stop$inboundSchema` instead. */
    export const inboundSchema = Stop$inboundSchema;
    /** @deprecated use `Stop$outboundSchema` instead. */
    export const outboundSchema = Stop$outboundSchema;
    /** @deprecated use `Stop$Outbound` instead. */
    export type Outbound = Stop$Outbound;
}

/** @internal */
export const One$inboundSchema: z.ZodNativeEnum<typeof One> = z.nativeEnum(One);

/** @internal */
export const One$outboundSchema: z.ZodNativeEnum<typeof One> = One$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
}

/** @internal */
export const CreateChatCompletionRequestFunctionCall$inboundSchema: z.ZodType<
    CreateChatCompletionRequestFunctionCall,
    z.ZodTypeDef,
    unknown
> = z.union([ChatCompletionFunctionCallOption$inboundSchema, One$inboundSchema]);

/** @internal */
export type CreateChatCompletionRequestFunctionCall$Outbound =
    | ChatCompletionFunctionCallOption$Outbound
    | string;

/** @internal */
export const CreateChatCompletionRequestFunctionCall$outboundSchema: z.ZodType<
    CreateChatCompletionRequestFunctionCall$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionRequestFunctionCall
> = z.union([ChatCompletionFunctionCallOption$outboundSchema, One$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionRequestFunctionCall$ {
    /** @deprecated use `CreateChatCompletionRequestFunctionCall$inboundSchema` instead. */
    export const inboundSchema = CreateChatCompletionRequestFunctionCall$inboundSchema;
    /** @deprecated use `CreateChatCompletionRequestFunctionCall$outboundSchema` instead. */
    export const outboundSchema = CreateChatCompletionRequestFunctionCall$outboundSchema;
    /** @deprecated use `CreateChatCompletionRequestFunctionCall$Outbound` instead. */
    export type Outbound = CreateChatCompletionRequestFunctionCall$Outbound;
}

/** @internal */
export const CreateChatCompletionRequest$inboundSchema: z.ZodType<
    CreateChatCompletionRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        messages: z.array(ChatCompletionRequestMessage$inboundSchema),
        model: z.nullable(z.any()).optional(),
        frequency_penalty: z.nullable(z.number().default(0)),
        logit_bias: z.nullable(z.record(z.number().int())).optional(),
        logprobs: z.nullable(z.boolean().default(false)),
        top_logprobs: z.nullable(z.number().int()).optional(),
        max_tokens: z.nullable(z.number().int()).optional(),
        n: z.nullable(z.number().int().default(1)),
        presence_penalty: z.nullable(z.number().default(0)),
        response_format: z.lazy(() => ResponseFormat$inboundSchema).optional(),
        seed: z.nullable(z.number().int()).optional(),
        stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
        stream: z.nullable(z.boolean().default(false)),
        stream_options: z.nullable(ChatCompletionStreamOptions$inboundSchema).optional(),
        temperature: z.nullable(z.number().default(1)),
        top_p: z.nullable(z.number().default(1)),
        tools: z.array(ChatCompletionTool$inboundSchema).optional(),
        tool_choice: ChatCompletionToolChoiceOption$inboundSchema.optional(),
        user: z.string().optional(),
        function_call: z
            .union([ChatCompletionFunctionCallOption$inboundSchema, One$inboundSchema])
            .optional(),
        functions: z.array(ChatCompletionFunctions$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            frequency_penalty: "frequencyPenalty",
            logit_bias: "logitBias",
            top_logprobs: "topLogprobs",
            max_tokens: "maxTokens",
            presence_penalty: "presencePenalty",
            response_format: "responseFormat",
            stream_options: "streamOptions",
            top_p: "topP",
            tool_choice: "toolChoice",
            function_call: "functionCall",
        });
    });

/** @internal */
export type CreateChatCompletionRequest$Outbound = {
    messages: Array<ChatCompletionRequestMessage$Outbound>;
    model?: any | null | undefined;
    frequency_penalty: number | null;
    logit_bias?: { [k: string]: number } | null | undefined;
    logprobs: boolean | null;
    top_logprobs?: number | null | undefined;
    max_tokens?: number | null | undefined;
    n: number | null;
    presence_penalty: number | null;
    response_format?: ResponseFormat$Outbound | undefined;
    seed?: number | null | undefined;
    stop?: string | Array<string> | null | undefined;
    stream: boolean | null;
    stream_options?: ChatCompletionStreamOptions$Outbound | null | undefined;
    temperature: number | null;
    top_p: number | null;
    tools?: Array<ChatCompletionTool$Outbound> | undefined;
    tool_choice?: ChatCompletionToolChoiceOption$Outbound | undefined;
    user?: string | undefined;
    function_call?: ChatCompletionFunctionCallOption$Outbound | string | undefined;
    functions?: Array<ChatCompletionFunctions$Outbound> | undefined;
};

/** @internal */
export const CreateChatCompletionRequest$outboundSchema: z.ZodType<
    CreateChatCompletionRequest$Outbound,
    z.ZodTypeDef,
    CreateChatCompletionRequest
> = z
    .object({
        messages: z.array(ChatCompletionRequestMessage$outboundSchema),
        model: z.nullable(z.any()).optional(),
        frequencyPenalty: z.nullable(z.number().default(0)),
        logitBias: z.nullable(z.record(z.number().int())).optional(),
        logprobs: z.nullable(z.boolean().default(false)),
        topLogprobs: z.nullable(z.number().int()).optional(),
        maxTokens: z.nullable(z.number().int()).optional(),
        n: z.nullable(z.number().int().default(1)),
        presencePenalty: z.nullable(z.number().default(0)),
        responseFormat: z.lazy(() => ResponseFormat$outboundSchema).optional(),
        seed: z.nullable(z.number().int()).optional(),
        stop: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
        stream: z.nullable(z.boolean().default(false)),
        streamOptions: z.nullable(ChatCompletionStreamOptions$outboundSchema).optional(),
        temperature: z.nullable(z.number().default(1)),
        topP: z.nullable(z.number().default(1)),
        tools: z.array(ChatCompletionTool$outboundSchema).optional(),
        toolChoice: ChatCompletionToolChoiceOption$outboundSchema.optional(),
        user: z.string().optional(),
        functionCall: z
            .union([ChatCompletionFunctionCallOption$outboundSchema, One$outboundSchema])
            .optional(),
        functions: z.array(ChatCompletionFunctions$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            frequencyPenalty: "frequency_penalty",
            logitBias: "logit_bias",
            topLogprobs: "top_logprobs",
            maxTokens: "max_tokens",
            presencePenalty: "presence_penalty",
            responseFormat: "response_format",
            streamOptions: "stream_options",
            topP: "top_p",
            toolChoice: "tool_choice",
            functionCall: "function_call",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateChatCompletionRequest$ {
    /** @deprecated use `CreateChatCompletionRequest$inboundSchema` instead. */
    export const inboundSchema = CreateChatCompletionRequest$inboundSchema;
    /** @deprecated use `CreateChatCompletionRequest$outboundSchema` instead. */
    export const outboundSchema = CreateChatCompletionRequest$outboundSchema;
    /** @deprecated use `CreateChatCompletionRequest$Outbound` instead. */
    export type Outbound = CreateChatCompletionRequest$Outbound;
}
