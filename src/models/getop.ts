/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { Feedback, Feedback$ } from "./feedback.js";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata.js";
import * as z from "zod";

export type GetGlobals = {
    xLog10Organization?: string | undefined;
};

export type GetRequest = {
    /**
     * The feedback id to fetch.
     */
    feedbackId: string;
    xLog10Organization?: string | undefined;
};

export type GetResponse = {
    httpMeta: HTTPMetadata;
    /**
     * OK
     */
    feedback?: Feedback | undefined;
};

/** @internal */
export namespace GetGlobals$ {
    export const inboundSchema: z.ZodType<GetGlobals, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
            });
        });

    export type Outbound = {
        "X-Log10-Organization"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetGlobals> = z
        .object({
            xLog10Organization: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
            });
        });
}

/** @internal */
export namespace GetRequest$ {
    export const inboundSchema: z.ZodType<GetRequest, z.ZodTypeDef, unknown> = z
        .object({
            feedbackId: z.string(),
            "X-Log10-Organization": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
            });
        });

    export type Outbound = {
        feedbackId: string;
        "X-Log10-Organization"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRequest> = z
        .object({
            feedbackId: z.string(),
            xLog10Organization: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
            });
        });
}

/** @internal */
export namespace GetResponse$ {
    export const inboundSchema: z.ZodType<GetResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            Feedback: Feedback$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Feedback: "feedback",
            });
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        Feedback?: Feedback$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            feedback: Feedback$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                feedback: "Feedback",
            });
        });
}
