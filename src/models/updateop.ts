/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Completion,
  Completion$inboundSchema,
  Completion$Outbound,
  Completion$outboundSchema,
} from "./completion.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "./httpmetadata.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateGlobals = {
  xLog10Organization?: string | undefined;
};

export type UpdateRequest = {
  /**
   * The completion id to update.
   */
  completionId: string;
  xLog10Organization?: string | undefined;
  completion: Completion;
};

export type UpdateResponse = {
  httpMeta: HTTPMetadata;
  /**
   * OK
   */
  completion?: Completion | undefined;
};

/** @internal */
export const UpdateGlobals$inboundSchema: z.ZodType<
  UpdateGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Log10-Organization": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Log10-Organization": "xLog10Organization",
  });
});

/** @internal */
export type UpdateGlobals$Outbound = {
  "X-Log10-Organization"?: string | undefined;
};

/** @internal */
export const UpdateGlobals$outboundSchema: z.ZodType<
  UpdateGlobals$Outbound,
  z.ZodTypeDef,
  UpdateGlobals
> = z.object({
  xLog10Organization: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xLog10Organization: "X-Log10-Organization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateGlobals$ {
  /** @deprecated use `UpdateGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateGlobals$inboundSchema;
  /** @deprecated use `UpdateGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateGlobals$outboundSchema;
  /** @deprecated use `UpdateGlobals$Outbound` instead. */
  export type Outbound = UpdateGlobals$Outbound;
}

export function updateGlobalsToJSON(updateGlobals: UpdateGlobals): string {
  return JSON.stringify(UpdateGlobals$outboundSchema.parse(updateGlobals));
}

export function updateGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateRequest$inboundSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  completionId: z.string(),
  "X-Log10-Organization": z.string().optional(),
  Completion: Completion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Log10-Organization": "xLog10Organization",
    "Completion": "completion",
  });
});

/** @internal */
export type UpdateRequest$Outbound = {
  completionId: string;
  "X-Log10-Organization"?: string | undefined;
  Completion: Completion$Outbound;
};

/** @internal */
export const UpdateRequest$outboundSchema: z.ZodType<
  UpdateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRequest
> = z.object({
  completionId: z.string(),
  xLog10Organization: z.string().optional(),
  completion: Completion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xLog10Organization: "X-Log10-Organization",
    completion: "Completion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequest$ {
  /** @deprecated use `UpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRequest$inboundSchema;
  /** @deprecated use `UpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRequest$outboundSchema;
  /** @deprecated use `UpdateRequest$Outbound` instead. */
  export type Outbound = UpdateRequest$Outbound;
}

export function updateRequestToJSON(updateRequest: UpdateRequest): string {
  return JSON.stringify(UpdateRequest$outboundSchema.parse(updateRequest));
}

export function updateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequest' from JSON`,
  );
}

/** @internal */
export const UpdateResponse$inboundSchema: z.ZodType<
  UpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Completion: Completion$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Completion": "completion",
  });
});

/** @internal */
export type UpdateResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Completion?: Completion$Outbound | undefined;
};

/** @internal */
export const UpdateResponse$outboundSchema: z.ZodType<
  UpdateResponse$Outbound,
  z.ZodTypeDef,
  UpdateResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  completion: Completion$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    completion: "Completion",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResponse$ {
  /** @deprecated use `UpdateResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateResponse$inboundSchema;
  /** @deprecated use `UpdateResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateResponse$outboundSchema;
  /** @deprecated use `UpdateResponse$Outbound` instead. */
  export type Outbound = UpdateResponse$Outbound;
}

export function updateResponseToJSON(updateResponse: UpdateResponse): string {
  return JSON.stringify(UpdateResponse$outboundSchema.parse(updateResponse));
}

export function updateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResponse' from JSON`,
  );
}
