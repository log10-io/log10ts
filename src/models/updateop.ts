/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { Completion, Completion$ } from "./completion.js";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata.js";
import * as z from "zod";

export type UpdateGlobals = {
    xLog10Organization?: string | undefined;
};

export type UpdateRequest = {
    /**
     * The completion id to update.
     */
    completionId: string;
    xLog10Organization?: string | undefined;
    completion: Completion;
};

export type UpdateResponse = {
    httpMeta: HTTPMetadata;
    /**
     * OK
     */
    completion?: Completion | undefined;
};

/** @internal */
export namespace UpdateGlobals$ {
    export const inboundSchema: z.ZodType<UpdateGlobals, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
            });
        });

    export type Outbound = {
        "X-Log10-Organization"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateGlobals> = z
        .object({
            xLog10Organization: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
            });
        });
}

/** @internal */
export namespace UpdateRequest$ {
    export const inboundSchema: z.ZodType<UpdateRequest, z.ZodTypeDef, unknown> = z
        .object({
            completionId: z.string(),
            "X-Log10-Organization": z.string().optional(),
            Completion: Completion$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
                Completion: "completion",
            });
        });

    export type Outbound = {
        completionId: string;
        "X-Log10-Organization"?: string | undefined;
        Completion: Completion$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateRequest> = z
        .object({
            completionId: z.string(),
            xLog10Organization: z.string().optional(),
            completion: Completion$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
                completion: "Completion",
            });
        });
}

/** @internal */
export namespace UpdateResponse$ {
    export const inboundSchema: z.ZodType<UpdateResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            Completion: Completion$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Completion: "completion",
            });
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        Completion?: Completion$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            completion: Completion$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                completion: "Completion",
            });
        });
}
