/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import { Feedback, Feedback$ } from "./feedback.js";
import { HTTPMetadata, HTTPMetadata$ } from "./httpmetadata.js";
import * as z from "zod";

export type UploadGlobals = {
    xLog10Organization?: string | undefined;
};

/**
 * The values of the feedback. Must be valid JSON according to the task schema.
 */
export type UploadRequestBodyJsonValues = {};

export type Two = {
    /**
     * The unique identifier for this feedback.
     */
    id?: string | undefined;
    /**
     * The epoch this schema was created.
     */
    createdAtMs?: number | undefined;
    /**
     * The unique identifier for the task associated with this feedback.
     */
    taskId: string;
    /**
     * The values of the feedback. Must be valid JSON according to the task schema.
     */
    jsonValues: UploadRequestBodyJsonValues;
    /**
     * The matched completion ids associated with this feedback.
     */
    matchedCompletionIds: Array<string>;
    /**
     * The comment associated with this feedback.
     */
    comment: string;
    completionsSummary?: string | undefined;
    /**
     * The completion ids to associate with this feedback.
     */
    completionIds: Array<string>;
};

/**
 * The values of the feedback. Must be valid JSON according to the task schema.
 */
export type RequestBodyJsonValues = {};

export type RequestBody1 = {
    /**
     * The unique identifier for this feedback.
     */
    id?: string | undefined;
    /**
     * The epoch this schema was created.
     */
    createdAtMs?: number | undefined;
    /**
     * The unique identifier for the task associated with this feedback.
     */
    taskId: string;
    /**
     * The values of the feedback. Must be valid JSON according to the task schema.
     */
    jsonValues: RequestBodyJsonValues;
    /**
     * The matched completion ids associated with this feedback.
     */
    matchedCompletionIds: Array<string>;
    /**
     * The comment associated with this feedback.
     */
    comment: string;
    completionsSummary?: string | undefined;
    /**
     * Whether to allow unmatched feedback. Defaults to false.
     */
    allowUnmatchedFeedback?: boolean | undefined;
    /**
     * The maximum number of matched completions. Returns error if exceeded. Defaults to 100.
     */
    maxMatchedCompletions?: number | undefined;
    /**
     * The completion tags associated with this feedback.
     */
    completionTagsSelector: Array<string>;
};

export type UploadRequestBody = Two | RequestBody1;

export type UploadRequest = {
    xLog10Organization?: string | undefined;
    requestBody: Two | RequestBody1;
};

export type UploadResponse = {
    httpMeta: HTTPMetadata;
    /**
     * OK
     */
    feedback?: Feedback | undefined;
};

/** @internal */
export namespace UploadGlobals$ {
    export const inboundSchema: z.ZodType<UploadGlobals, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
            });
        });

    export type Outbound = {
        "X-Log10-Organization"?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadGlobals> = z
        .object({
            xLog10Organization: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
            });
        });
}

/** @internal */
export namespace UploadRequestBodyJsonValues$ {
    export const inboundSchema: z.ZodType<UploadRequestBodyJsonValues, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadRequestBodyJsonValues> =
        z.object({});
}

/** @internal */
export namespace Two$ {
    export const inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            created_at_ms: z.number().optional(),
            task_id: z.string(),
            json_values: z.lazy(() => UploadRequestBodyJsonValues$.inboundSchema),
            matched_completion_ids: z.array(z.string()),
            comment: z.string(),
            completions_summary: z.string().optional(),
            completion_ids: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                created_at_ms: "createdAtMs",
                task_id: "taskId",
                json_values: "jsonValues",
                matched_completion_ids: "matchedCompletionIds",
                completions_summary: "completionsSummary",
                completion_ids: "completionIds",
            });
        });

    export type Outbound = {
        id?: string | undefined;
        created_at_ms?: number | undefined;
        task_id: string;
        json_values: UploadRequestBodyJsonValues$.Outbound;
        matched_completion_ids: Array<string>;
        comment: string;
        completions_summary?: string | undefined;
        completion_ids: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Two> = z
        .object({
            id: z.string().optional(),
            createdAtMs: z.number().optional(),
            taskId: z.string(),
            jsonValues: z.lazy(() => UploadRequestBodyJsonValues$.outboundSchema),
            matchedCompletionIds: z.array(z.string()),
            comment: z.string(),
            completionsSummary: z.string().optional(),
            completionIds: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                createdAtMs: "created_at_ms",
                taskId: "task_id",
                jsonValues: "json_values",
                matchedCompletionIds: "matched_completion_ids",
                completionsSummary: "completions_summary",
                completionIds: "completion_ids",
            });
        });
}

/** @internal */
export namespace RequestBodyJsonValues$ {
    export const inboundSchema: z.ZodType<RequestBodyJsonValues, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBodyJsonValues> =
        z.object({});
}

/** @internal */
export namespace RequestBody1$ {
    export const inboundSchema: z.ZodType<RequestBody1, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            created_at_ms: z.number().optional(),
            task_id: z.string(),
            json_values: z.lazy(() => RequestBodyJsonValues$.inboundSchema),
            matched_completion_ids: z.array(z.string()),
            comment: z.string(),
            completions_summary: z.string().optional(),
            allow_unmatched_feedback: z.boolean().default(false),
            max_matched_completions: z.number().int().default(100),
            completion_tags_selector: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                created_at_ms: "createdAtMs",
                task_id: "taskId",
                json_values: "jsonValues",
                matched_completion_ids: "matchedCompletionIds",
                completions_summary: "completionsSummary",
                allow_unmatched_feedback: "allowUnmatchedFeedback",
                max_matched_completions: "maxMatchedCompletions",
                completion_tags_selector: "completionTagsSelector",
            });
        });

    export type Outbound = {
        id?: string | undefined;
        created_at_ms?: number | undefined;
        task_id: string;
        json_values: RequestBodyJsonValues$.Outbound;
        matched_completion_ids: Array<string>;
        comment: string;
        completions_summary?: string | undefined;
        allow_unmatched_feedback: boolean;
        max_matched_completions: number;
        completion_tags_selector: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RequestBody1> = z
        .object({
            id: z.string().optional(),
            createdAtMs: z.number().optional(),
            taskId: z.string(),
            jsonValues: z.lazy(() => RequestBodyJsonValues$.outboundSchema),
            matchedCompletionIds: z.array(z.string()),
            comment: z.string(),
            completionsSummary: z.string().optional(),
            allowUnmatchedFeedback: z.boolean().default(false),
            maxMatchedCompletions: z.number().int().default(100),
            completionTagsSelector: z.array(z.string()),
        })
        .transform((v) => {
            return remap$(v, {
                createdAtMs: "created_at_ms",
                taskId: "task_id",
                jsonValues: "json_values",
                matchedCompletionIds: "matched_completion_ids",
                completionsSummary: "completions_summary",
                allowUnmatchedFeedback: "allow_unmatched_feedback",
                maxMatchedCompletions: "max_matched_completions",
                completionTagsSelector: "completion_tags_selector",
            });
        });
}

/** @internal */
export namespace UploadRequestBody$ {
    export const inboundSchema: z.ZodType<UploadRequestBody, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Two$.inboundSchema),
        z.lazy(() => RequestBody1$.inboundSchema),
    ]);

    export type Outbound = Two$.Outbound | RequestBody1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadRequestBody> = z.union([
        z.lazy(() => Two$.outboundSchema),
        z.lazy(() => RequestBody1$.outboundSchema),
    ]);
}

/** @internal */
export namespace UploadRequest$ {
    export const inboundSchema: z.ZodType<UploadRequest, z.ZodTypeDef, unknown> = z
        .object({
            "X-Log10-Organization": z.string().optional(),
            RequestBody: z.union([
                z.lazy(() => Two$.inboundSchema),
                z.lazy(() => RequestBody1$.inboundSchema),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                "X-Log10-Organization": "xLog10Organization",
                RequestBody: "requestBody",
            });
        });

    export type Outbound = {
        "X-Log10-Organization"?: string | undefined;
        RequestBody: Two$.Outbound | RequestBody1$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadRequest> = z
        .object({
            xLog10Organization: z.string().optional(),
            requestBody: z.union([
                z.lazy(() => Two$.outboundSchema),
                z.lazy(() => RequestBody1$.outboundSchema),
            ]),
        })
        .transform((v) => {
            return remap$(v, {
                xLog10Organization: "X-Log10-Organization",
                requestBody: "RequestBody",
            });
        });
}

/** @internal */
export namespace UploadResponse$ {
    export const inboundSchema: z.ZodType<UploadResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: HTTPMetadata$.inboundSchema,
            Feedback: Feedback$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                Feedback: "feedback",
            });
        });

    export type Outbound = {
        HttpMeta: HTTPMetadata$.Outbound;
        Feedback?: Feedback$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadResponse> = z
        .object({
            httpMeta: HTTPMetadata$.outboundSchema,
            feedback: Feedback$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                feedback: "Feedback",
            });
        });
}
