/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type FunctionObject = {
    /**
     * A description of what the function does, used by the model to choose when and how to call the function.
     */
    description?: string | undefined;
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     */
    name: string;
    /**
     * The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     *
     * @remarks
     *
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    parameters?: { [k: string]: any } | undefined;
};

/** @internal */
export namespace FunctionObject$ {
    export const inboundSchema: z.ZodType<FunctionObject, z.ZodTypeDef, unknown> = z.object({
        description: z.string().optional(),
        name: z.string(),
        parameters: z.record(z.any()).optional(),
    });

    export type Outbound = {
        description?: string | undefined;
        name: string;
        parameters?: { [k: string]: any } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FunctionObject> = z.object({
        description: z.string().optional(),
        name: z.string(),
        parameters: z.record(z.any()).optional(),
    });
}
