/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export enum ChatCompletionMessageToolCallType {
    Function = "function",
}

/**
 * The function that the model called.
 */
export type FunctionT = {
    /**
     * The name of the function to call.
     */
    name: string;
    /**
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    arguments: string;
};

export type ChatCompletionMessageToolCall = {
    /**
     * The ID of the tool call.
     */
    id: string;
    /**
     * The type of the tool. Currently, only `function` is supported.
     */
    type: ChatCompletionMessageToolCallType;
    /**
     * The function that the model called.
     */
    function: FunctionT;
};

/** @internal */
export namespace ChatCompletionMessageToolCallType$ {
    export const inboundSchema = z.nativeEnum(ChatCompletionMessageToolCallType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace FunctionT$ {
    export const inboundSchema: z.ZodType<FunctionT, z.ZodTypeDef, unknown> = z.object({
        name: z.string(),
        arguments: z.string(),
    });

    export type Outbound = {
        name: string;
        arguments: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FunctionT> = z.object({
        name: z.string(),
        arguments: z.string(),
    });
}

/** @internal */
export namespace ChatCompletionMessageToolCall$ {
    export const inboundSchema: z.ZodType<ChatCompletionMessageToolCall, z.ZodTypeDef, unknown> =
        z.object({
            id: z.string(),
            type: ChatCompletionMessageToolCallType$.inboundSchema,
            function: z.lazy(() => FunctionT$.inboundSchema),
        });

    export type Outbound = {
        id: string;
        type: string;
        function: FunctionT$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatCompletionMessageToolCall> =
        z.object({
            id: z.string(),
            type: ChatCompletionMessageToolCallType$.outboundSchema,
            function: z.lazy(() => FunctionT$.outboundSchema),
        });
}
