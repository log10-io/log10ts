/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../lib/primitives.js";
import * as z from "zod";

export type TopLogprobs = {
    /**
     * The token.
     */
    token: string;
    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
     */
    logprob: number;
    /**
     * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
     */
    bytes: Array<number> | null;
};

export type ChatCompletionTokenLogprob = {
    /**
     * The token.
     */
    token: string;
    /**
     * The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
     */
    logprob: number;
    /**
     * A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
     */
    bytes: Array<number> | null;
    /**
     * List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
     */
    topLogprobs: Array<TopLogprobs>;
};

/** @internal */
export const TopLogprobs$inboundSchema: z.ZodType<TopLogprobs, z.ZodTypeDef, unknown> = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number().int())),
});

/** @internal */
export type TopLogprobs$Outbound = {
    token: string;
    logprob: number;
    bytes: Array<number> | null;
};

/** @internal */
export const TopLogprobs$outboundSchema: z.ZodType<
    TopLogprobs$Outbound,
    z.ZodTypeDef,
    TopLogprobs
> = z.object({
    token: z.string(),
    logprob: z.number(),
    bytes: z.nullable(z.array(z.number().int())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TopLogprobs$ {
    /** @deprecated use `TopLogprobs$inboundSchema` instead. */
    export const inboundSchema = TopLogprobs$inboundSchema;
    /** @deprecated use `TopLogprobs$outboundSchema` instead. */
    export const outboundSchema = TopLogprobs$outboundSchema;
    /** @deprecated use `TopLogprobs$Outbound` instead. */
    export type Outbound = TopLogprobs$Outbound;
}

/** @internal */
export const ChatCompletionTokenLogprob$inboundSchema: z.ZodType<
    ChatCompletionTokenLogprob,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        token: z.string(),
        logprob: z.number(),
        bytes: z.nullable(z.array(z.number().int())),
        top_logprobs: z.array(z.lazy(() => TopLogprobs$inboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            top_logprobs: "topLogprobs",
        });
    });

/** @internal */
export type ChatCompletionTokenLogprob$Outbound = {
    token: string;
    logprob: number;
    bytes: Array<number> | null;
    top_logprobs: Array<TopLogprobs$Outbound>;
};

/** @internal */
export const ChatCompletionTokenLogprob$outboundSchema: z.ZodType<
    ChatCompletionTokenLogprob$Outbound,
    z.ZodTypeDef,
    ChatCompletionTokenLogprob
> = z
    .object({
        token: z.string(),
        logprob: z.number(),
        bytes: z.nullable(z.array(z.number().int())),
        topLogprobs: z.array(z.lazy(() => TopLogprobs$outboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            topLogprobs: "top_logprobs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionTokenLogprob$ {
    /** @deprecated use `ChatCompletionTokenLogprob$inboundSchema` instead. */
    export const inboundSchema = ChatCompletionTokenLogprob$inboundSchema;
    /** @deprecated use `ChatCompletionTokenLogprob$outboundSchema` instead. */
    export const outboundSchema = ChatCompletionTokenLogprob$outboundSchema;
    /** @deprecated use `ChatCompletionTokenLogprob$Outbound` instead. */
    export type Outbound = ChatCompletionTokenLogprob$Outbound;
}
