/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import { encodeJSON as encodeJSON$, encodeSimple as encodeSimple$ } from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import * as schemas$ from "../lib/schemas";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as operations from "../models/operations";

export class Completions extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    /**
     * Create a completion
     */
    async create(
        completion: components.Completion,
        xLog10Organization?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.CreateResponse> {
        const input$: operations.CreateRequest = {
            xLog10Organization: xLog10Organization,
            completion: completion,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.CreateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.Completion, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/completions")();

        const query$ = "";

        headers$.set(
            "X-Log10-Organization",
            encodeSimple$(
                "X-Log10-Organization",
                payload$["X-Log10-Organization"] ?? this.options$.xLog10Organization,
                { explode: false, charEncoding: "none" }
            )
        );

        let security$;
        if (typeof this.options$.log10Token === "function") {
            security$ = { log10Token: await this.options$.log10Token() };
        } else if (this.options$.log10Token) {
            security$ = { log10Token: this.options$.log10Token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "create",
            oAuth2Scopes: [],
            securitySource: this.options$.log10Token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.CreateResponse>()
            .json(200, operations.CreateResponse$, { key: "any" })
            .json(201, operations.CreateResponse$, { key: "Completion" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * Update completion by id.
     */
    async update(
        completionId: string,
        completion: components.Completion,
        xLog10Organization?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.UpdateResponse> {
        const input$: operations.UpdateRequest = {
            completionId: completionId,
            xLog10Organization: xLog10Organization,
            completion: completion,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.UpdateRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$.Completion, { explode: true });

        const pathParams$ = {
            completionId: encodeSimple$("completionId", payload$.completionId, {
                explode: false,
                charEncoding: "percent",
            }),
        };
        const path$ = this.templateURLComponent("/api/v1/completions/{completionId}")(pathParams$);

        const query$ = "";

        headers$.set(
            "X-Log10-Organization",
            encodeSimple$(
                "X-Log10-Organization",
                payload$["X-Log10-Organization"] ?? this.options$.xLog10Organization,
                { explode: false, charEncoding: "none" }
            )
        );

        let security$;
        if (typeof this.options$.log10Token === "function") {
            security$ = { log10Token: await this.options$.log10Token() };
        } else if (this.options$.log10Token) {
            security$ = { log10Token: this.options$.log10Token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "update",
            oAuth2Scopes: [],
            securitySource: this.options$.log10Token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.UpdateResponse>()
            .json(200, operations.UpdateResponse$, { key: "Completion" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }

    /**
     * List ungraded completions i.e. completions that have not been associated with feedback but matches task selector.
     */
    async listUngraded(
        xLog10Organization?: string | undefined,
        options?: RequestOptions
    ): Promise<operations.ListUngradedResponse> {
        const input$: operations.ListUngradedRequest = {
            xLog10Organization: xLog10Organization,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Accept", "application/json");

        const payload$ = schemas$.parse(
            input$,
            (value$) => operations.ListUngradedRequest$.outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = null;

        const path$ = this.templateURLComponent("/api/v1/completions/ungraded")();

        const query$ = "";

        headers$.set(
            "X-Log10-Organization",
            encodeSimple$(
                "X-Log10-Organization",
                payload$["X-Log10-Organization"] ?? this.options$.xLog10Organization,
                { explode: false, charEncoding: "none" }
            )
        );

        let security$;
        if (typeof this.options$.log10Token === "function") {
            security$ = { log10Token: await this.options$.log10Token() };
        } else if (this.options$.log10Token) {
            security$ = { log10Token: this.options$.log10Token };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "listUngraded",
            oAuth2Scopes: [],
            securitySource: this.options$.log10Token,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const doOptions = { context, errorCodes: ["4XX", "5XX"] };
        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
            },
            options
        );

        const response = await this.do$(request$, doOptions);

        const responseFields$ = {
            HttpMeta: { Response: response, Request: request$ },
        };

        const [result$] = await this.matcher<operations.ListUngradedResponse>()
            .json(200, operations.ListUngradedResponse$, { key: "object" })
            .fail(["4XX", "5XX"])
            .match(response, request$, { extraFields: responseFields$ });

        return result$;
    }
}
